var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"using AlGeo","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"What are the main functions and what they do","category":"page"},{"location":"functions/#Algeo","page":"Functions","title":"Algeo","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Algeo is the most important function of any system with this library, as it defines an environment, that is, an algebra that will be used to handle future operations. Thus, as its definition follows, we have:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.Algeo","category":"page"},{"location":"functions/#Main.AlGeo.Algeo","page":"Functions","title":"Main.AlGeo.Algeo","text":"Algeo(p, q, VectorBasis, Basis)::Algebra\n\nMain function for creating your Algebra and adding its basis blades to REPL. Constructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"Which allows us to create spaces like the following, representing the imaginary set:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Algeo(0,1,[\"i\"])","category":"page"},{"location":"functions/#Blades","page":"Functions","title":"Blades","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"All types introduced in AlGeo are subtype of AbstractGeometricAlgebraType. Blade type is the most primitive subtype wich is used to define more complete structures, like Multivectors. Once we define an Algebra, a set of Blade is created. For example, let us create the space R3.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Algeo(3)","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Now, the elements id, e1, e2, e3, e12, e13, e23, e123 were created, representing the basis blades of the Algebra.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"typeof(e1) <: AlGeo.AbstractGeometricAlgebraType","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"By now, operation tables related to the geometric, internal and outer products are created and will be used in these operations. The id element is a BasisBlade used in place of the number 1.","category":"page"},{"location":"functions/#Multivectors","page":"Functions","title":"Multivectors","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Multivectors are mutable structures primarily used for internal operations within AlGeo, but they are subtypes of AbstractGeometricAlgebraType. They are composed of the sum of blades arranged in a sparse vector, used for more efficient representation.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Note that there when is defined a scalar product or sum or diference between an real scalar and BasisBlade element a new Multivector is always returned. A MultiVector struct is showed just in function and order of the Basis Blade set that define the space.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Multivector <: AlGeo.AbstractGeometricAlgebraType # true\nMultivectors([8],[2.5]) == 2.5*e1e2e3 # true\nMultivectors([1, 2, 3, 4, 5, 6],[1, 2, 3, 4, 5, 6]) == 1 + 2*e1 + 3*e2 + 4*e3 + 5*e1e2 + 6*e1e3 # true","category":"page"},{"location":"functions/#Simple-Blade-functions","page":"Functions","title":"Simple Blade functions","text":"","category":"section"},{"location":"functions/#bladeIndex","page":"Functions","title":"bladeIndex","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.bladeIndex","category":"page"},{"location":"functions/#Main.AlGeo.bladeIndex","page":"Functions","title":"Main.AlGeo.bladeIndex","text":"bladeIndex(vec, Al)::Array\n\nFunction that returns the indexes of a blade.\n\nArguments\n\nvec::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nReturns an array with all indexes of that blade.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.bladeIndex(e1e2)","category":"page"},{"location":"functions/#bladeScalar","page":"Functions","title":"bladeScalar","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.bladeScalar","category":"page"},{"location":"functions/#Main.AlGeo.bladeScalar","page":"Functions","title":"Main.AlGeo.bladeScalar","text":"bladeScalar(vec)::Any\n\nFunction that returns scalar of a Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nA real number, the scalar.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.bladeScalar(4.5*e1e2)","category":"page"},{"location":"functions/#grade","page":"Functions","title":"grade","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.grade","category":"page"},{"location":"functions/#Main.AlGeo.grade","page":"Functions","title":"Main.AlGeo.grade","text":"grade(vec)::Int\n\nFunction that returns the grade of the Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nAn integer, the grade of the blade.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"grade(e1e2e3)","category":"page"},{"location":"functions/#gradeProjection","page":"Functions","title":"gradeProjection","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"AlGeo.gradeProjection","category":"page"},{"location":"functions/#Main.AlGeo.gradeProjection","page":"Functions","title":"Main.AlGeo.gradeProjection","text":"gradeProjection(vec, k)::Blade\n\nFunction that returns the grade Projection between a Blade and an Integer.\n\nArguments\n\nvec::Blade : A Blade.\nk::Int : An integer to the Grade Projection\n\nReturn\n\nThe result Blade. It might be the 1D blade \"1\"\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"gradeProjection(-e1e2, 2) == -1.0*e1e2","category":"page"},{"location":"functions/#Operations","page":"Functions","title":"Operations","text":"","category":"section"},{"location":"functions/#Scalar-Product","page":"Functions","title":"Scalar Product","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"The scalar product is a type of operation that occurs between a blade or multivector and any scalar number. Its symbol for operations is *","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"2*id*(e1+e2) == 2.0*e1+2.0*e2","category":"page"},{"location":"functions/#Geometric-Product","page":"Functions","title":"Geometric Product","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"The geometric product is the core of all geometric algebra, and here in AlGeo, it is represented between blades and multivectors using the symbol *, which should not be confused with the scalar product symbol. Although they are the same, they have different contexts and operands of different types.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"e3*e1 == -e1e3","category":"page"},{"location":"functions/#Inner-Product","page":"Functions","title":"Inner Product","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"The inner product is another type of operation defined for Geometric Algebra and is represented within AlGeo by the symbol |.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"e1e2|e1 == -e2","category":"page"},{"location":"functions/#Outer-Product","page":"Functions","title":"Outer Product","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"The Outer product is another type of operation defined for Geometric Algebra and is represented within AlGeo by the symbol ^.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"e1^e1e2 == 0*id","category":"page"},{"location":"functions/#All-Together","page":"Functions","title":"All Together","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"The products can be used in whichever way is preferred, including all mixed together, with sums, parentheses, or any usual arithmetic operation.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"And it works as the following example:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"(1+2*e1)|(5e1e2^e2) == 0.0*id","category":"page"},{"location":"references/","page":"References","title":"References","text":"CurrentModule = AlGeo","category":"page"},{"location":"references/","page":"References","title":"References","text":"Modules = [AlGeo]","category":"page"},{"location":"references/#Main.AlGeo.Algebra","page":"References","title":"Main.AlGeo.Algebra","text":"Algebra(p, q, VectorBasis, Basis, Indexes)\n\nA structure to define an algebra to be worked with its respective dimensions and canonical vectors.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\nIndexes::Array{Array{Int}} : An array with all the indexes of canonical blades\n\n\n\n\n\n","category":"type"},{"location":"references/#Main.AlGeo.Blade","page":"References","title":"Main.AlGeo.Blade","text":"Blade(val)\n\nStruct that creates the Blade object.\n\nArguments\n\nval::SparseArrays.SparseVector{Float64, Int64} : An sparse vector with the internal values of basis blades and their scalars.\n\n\n\n\n\n","category":"type"},{"location":"references/#Main.AlGeo.Multivector","page":"References","title":"Main.AlGeo.Multivector","text":"Multivector(val)\n\nStruct that creates the multivector object.\n\nArguments\n\nval::SparseArrays.SparseVector{Float64, Int64} : An sparse vector with the internal values of basis blades and their scalars.\n\n\n\n\n\n","category":"type"},{"location":"references/#Main.AlGeo.Algeo","page":"References","title":"Main.AlGeo.Algeo","text":"Algeo(p, q, VectorBasis, Basis)::Algebra\n\nMain function for creating your Algebra and adding its basis blades to REPL. Constructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CanonBasis-Tuple{Array{String}}","page":"References","title":"Main.AlGeo.CanonBasis","text":"CanonBasis(VectorBasis)::Array{Tuple{String, Int}}\n\nFunction that lists all the combinations of canonical vectors in a given Algebra.\n\nArguments\n\nVectorBasis::Array{String} : An array of strings to be combined.\n\nReturn\n\nReturns a list of tuples with all combinations of the elements and its index, forming the basis of the multivector space.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.CanonVectorBasis","page":"References","title":"Main.AlGeo.CanonVectorBasis","text":"CanonVectorBasis(p, q)::Array{String}\n\nFunction that writes the canonical vector space, given the parameters p and q for definition\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\n\nReturn\n\nReturn an array of strings with all the necessary elements for this space.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CombinationsArray-Tuple{Array, Int64}","page":"References","title":"Main.AlGeo.CombinationsArray","text":"CombinationsArray(lst, k)::Array{Array{Any}}\n\nFunction that calculates all combinations in an array of Integers.\n\nArguments\n\nlst::Array : A list of Integers.\nk::Int : The order of the combinations.\n\nReturn\n\nReturns an array with all combinations of elements taken k at a time.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.CombinationsTuple-Tuple{Array, Int64, Int64}","page":"References","title":"Main.AlGeo.CombinationsTuple","text":"CombinationsTuple(lst, k, count)::Array{Tuple{Any,Int}}\n\nFunction that calculates all combinations in an array of strings.\n\nArguments\n\nlst::Array : A list of Strings.\nk::Int : The order of the combinations.\ncount::Int : The index of each element\n\nReturn\n\nReturns an array with all combinations of elements taken k at a time.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.CreateAlgebra","page":"References","title":"Main.AlGeo.CreateAlgebra","text":"CreateAlgebra(p, q, VectorBasis, Basis)\n\nConstructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CreateGPTable","page":"References","title":"Main.AlGeo.CreateGPTable","text":"CreateGPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Geometric Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CreateIPTable","page":"References","title":"Main.AlGeo.CreateIPTable","text":"CreateIPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Inner Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CreateOPTable","page":"References","title":"Main.AlGeo.CreateOPTable","text":"CreateOPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Outer Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.CreateSymbols-Tuple{Array}","page":"References","title":"Main.AlGeo.CreateSymbols","text":"CreateSymbols(stringSymbols)\n\nCreate and add to REPL all the (custom or basis) symbols for this Algebra.\n\nArguments\n\nstringSymbols::Array : An array with all the custom or basis symbols.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.CreateTables-Tuple{}","page":"References","title":"Main.AlGeo.CreateTables","text":"CreateTables()\n\nCreate and add to REPL all the custom operation tables for this Algebra.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.IndexesBasis","page":"References","title":"Main.AlGeo.IndexesBasis","text":"IndexesBasis(p, q)::Array\n\nA function to return all the indexes of every canon multivector. It is used for internal calculations.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\n\nReturn\n\nReturns an Array of Arrays of integers, with all indexes in order.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.Multivectors","page":"References","title":"Main.AlGeo.Multivectors","text":"Multivectors(baseVectors, scalars, Al)::AbstractGeometricAlgebraType\n\nConstructor function for creating either blades or multivectors, done automatically.\n\nArguments\n\nbaseVectors::Array : An array of integers, representing the actual basis blade that exists in this object in order.\nscalars::Array : An array of integers, representing the scalars of each basis blade in order.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nReturns an AbstractGeometricAlgebraType.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.basisScalarProduct","page":"References","title":"Main.AlGeo.basisScalarProduct","text":"basisScalarProduct(ei, ej, Al)::Int\n\nFunction that returns the Scalar Product between two basis blades.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Integer.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.bladeGeometricProduct","page":"References","title":"Main.AlGeo.bladeGeometricProduct","text":"bladeGeometricProduct(ei, ej, Al)::Blade\n\nFunction that returns the Geometric Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.bladeIndex","page":"References","title":"Main.AlGeo.bladeIndex","text":"bladeIndex(vec, Al)::Array\n\nFunction that returns the indexes of a blade.\n\nArguments\n\nvec::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nReturns an array with all indexes of that blade.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.bladeInnerProduct-Tuple{Blade, Blade}","page":"References","title":"Main.AlGeo.bladeInnerProduct","text":"bladeInnerProduct(ei, ej)::Blade\n\nFunction that returns the Inner Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.bladeOuterProduct-Tuple{Blade, Blade}","page":"References","title":"Main.AlGeo.bladeOuterProduct","text":"bladeOuterProduct(ei, ej)::Blade\n\nFunction that returns the Outer Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.bladeScalar-Tuple{Blade}","page":"References","title":"Main.AlGeo.bladeScalar","text":"bladeScalar(vec)::Any\n\nFunction that returns scalar of a Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nA real number, the scalar.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.bladeScalarProduct-Tuple{Blade, Number}","page":"References","title":"Main.AlGeo.bladeScalarProduct","text":"bladeScalarProduct(ei, k)::Blade\n\nFunction that returns the Scalar Product between a blades and a 1D Number.\n\nArguments\n\nei::Blade : A Blade.\nk::Number : A scalar.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.grade-Tuple{Blade}","page":"References","title":"Main.AlGeo.grade","text":"grade(vec)::Int\n\nFunction that returns the grade of the Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nAn integer, the grade of the blade.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.gradeProjection-Tuple{Blade, Int64}","page":"References","title":"Main.AlGeo.gradeProjection","text":"gradeProjection(vec, k)::Blade\n\nFunction that returns the grade Projection between a Blade and an Integer.\n\nArguments\n\nvec::Blade : A Blade.\nk::Int : An integer to the Grade Projection\n\nReturn\n\nThe result Blade. It might be the 1D blade \"1\"\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.lenElements-Tuple{Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.lenElements","text":"lenElements(vec)::Int\n\nFunction that returns the length of elements in an Abstract Geometric Algebra Type.\n\nArguments\n\nvec::AbstractGeometricAlgebraType : A multivector or a Blade.\n\nReturn\n\nAn integer, the ammount of elements.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.multivectorGP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.multivectorGP","text":"multivectorGP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the geometric product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.multivectorIP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.multivectorIP","text":"multivectorIP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the inner product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.multivectorOP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.multivectorOP","text":"multivectorOP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the outer product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.multivectorSub-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.multivectorSub","text":"multivectorSub(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that subtracts two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.multivectorSum-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"References","title":"Main.AlGeo.multivectorSum","text":"multivectorSum(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that sums two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"references/#Main.AlGeo.rawBladeGeometricProduct","page":"References","title":"Main.AlGeo.rawBladeGeometricProduct","text":"rawBladeGeometricProduct(ei, ej, Al)::Blade\n\nFunction that returns the Geometric Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.rawBladeInnerProduct","page":"References","title":"Main.AlGeo.rawBladeInnerProduct","text":"rawBladeInnerProduct(ei, ej)::Blade\n\nFunction that returns the Inner Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"references/#Main.AlGeo.rawBladeOuterProduct","page":"References","title":"Main.AlGeo.rawBladeOuterProduct","text":"rawBladeOuterProduct(ei, ej)::Blade\n\nFunction that returns the Outer Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using AlGeo\nComplex = Algeo(0, 1, [\"i\"])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using AlGeo\nR2 = Algeo(2,0,[\"i\",\"j\"])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"How to use?","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nSince the system is in its implementation phase, new examples will be added in the future.","category":"page"},{"location":"examples/#Complex-Plane","page":"Examples","title":"Complex Plane","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates a way to work with complex numbers using the AlGeo library, in a user-friendly manner with regard to notation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Complex = Algeo(0, 1, [\"i\"])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"i*i == -1*id\n5*i*i*i == -5*i\n(1+i)*(1+i) == 2*i\n(1+i)*(1-i) == 2*id","category":"page"},{"location":"examples/#R2-plane","page":"Examples","title":"R2 plane","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates a way to work with the R2 vectors using the AlGeo library, in a user-friendly manner with regard to notation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"R2 = Algeo(2,0,[\"i\",\"j\"])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"i^i == 0*id\ni|j == 0*id\ni^j == ij\n(i + 2*j)|(5*i+2*j) == 9*id","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"using AlGeo\nAlgeo(3)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"How to install","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This package is not yet in Metadata.jl, so the package can't be installed with the Julia package manager. Thus, for installing it, from the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add https://github.com/VitorLorencone/AlGeo.jl.git","category":"page"},{"location":"install/#First-Steps","page":"Installation","title":"First Steps","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Now, for start AlGeo, return to Julia mode in REPL and type:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> using AlGeo","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"The second step to use AlGeo is define an Algebra, an environment. The environment is defined through the Algeo() function such as:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> Algeo(3, 0)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"In this case, were created the 3D space. More information about the created space, is just showed in the REPL. By now, try to execute the following command:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> (1+e1e2e3)*(e1)\n1.0*e1 + 1.0*e2e3","category":"page"},{"location":"#AlGeo.jl","page":"Home","title":"AlGeo.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AlGeo","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Geometric Algebra library written in Julia","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This page is dedicated to document the use of AlGeo, a library for Geometric Algebra. Our goal is to provide an accessible and easy to learn experience for students and researchers interested in using (and programming with) a Geometric Algebra library.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Our aim is to offer a relatively simple, open, easy-to-install, and focused environment for Julia users. This library was developed by implementing basic operations as described in textbooks, without an emphasis on optimizing functions based on other libraries. For the future, the plans are to expand the library's ease of use and introduce concepts for modeling and visualizing spaces in Geometric Algebra.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This project is continually evolving, and many aspects are being refined to achieve better results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A foundational understanding of the theoretical aspects of Geometric Algebra is highly recommended. We suggest the following references:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Christian Perwass, Geometric Algebra with Applications in Engineering, Springer Series in Geometry and Computing, 2009.\nL.Dorst, D.Fontijne and S.Mann, Geometric Algebra for Computer Science: an object oriented approach to geometry, Morgan Kaufman publishers, 2007.","category":"page"},{"location":"#Current-Status","page":"Home","title":"Current Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current state of the project is an initial version with issues yet to be identified and limited practical use, primarily due to the lack of support for visualizing elements in space (one of the future goals).","category":"page"},{"location":"#Summary","page":"Home","title":"Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation\nFunctions\nExamples\nReferences","category":"page"},{"location":"#Developed-By","page":"Home","title":"Developed By","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is being developed as part of a scientific initiation program at the State University of Maringá.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Vitor Madeira Lorençone - Student\nEmerson Vitor Castelani - Professor","category":"page"}]
}
