var documenterSearchIndex = {"docs":
[{"location":"teste/mod1/#Section1.jl","page":"Section1.jl","title":"Section1.jl","text":"","category":"section"},{"location":"teste/mod1/","page":"Section1.jl","title":"Section1.jl","text":"Documentation for AlGeo.jl pt 2","category":"page"},{"location":"teste/mod1/","page":"Section1.jl","title":"Section1.jl","text":"AlGeo.Algeo","category":"page"},{"location":"teste/mod1/#Main.AlGeo.Algeo","page":"Section1.jl","title":"Main.AlGeo.Algeo","text":"Algeo(p, q, VectorBasis, Basis)::Algebra\n\nMain function for creating your Algebra and adding its basis blades to REPL. Constructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"teste/mod1/","page":"Section1.jl","title":"Section1.jl","text":"teste abaixo do docs","category":"page"},{"location":"#AlGeo.jl","page":"AlGeo.jl","title":"AlGeo.jl","text":"","category":"section"},{"location":"","page":"AlGeo.jl","title":"AlGeo.jl","text":"Documentation for AlGeo.jl","category":"page"},{"location":"","page":"AlGeo.jl","title":"AlGeo.jl","text":"CurrentModule = AlGeo","category":"page"},{"location":"","page":"AlGeo.jl","title":"AlGeo.jl","text":"Modules = [AlGeo]","category":"page"},{"location":"#Main.AlGeo.Algebra","page":"AlGeo.jl","title":"Main.AlGeo.Algebra","text":"Algebra(p, q, VectorBasis, Basis, Indexes)\n\nA structure to define an algebra to be worked with its respective dimensions and canonical vectors.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\nIndexes::Array{Array{Int}} : An array with all the indexes of canonical blades\n\n\n\n\n\n","category":"type"},{"location":"#Main.AlGeo.Blade","page":"AlGeo.jl","title":"Main.AlGeo.Blade","text":"Blade(val)\n\nStruct that creates the Blade object.\n\nArguments\n\nval::SparseArrays.SparseVector{Float64, Int64} : An sparse vector with the internal values of basis blades and their scalars.\n\n\n\n\n\n","category":"type"},{"location":"#Main.AlGeo.Multivector","page":"AlGeo.jl","title":"Main.AlGeo.Multivector","text":"Multivector(val)\n\nStruct that creates the multivector object.\n\nArguments\n\nval::SparseArrays.SparseVector{Float64, Int64} : An sparse vector with the internal values of basis blades and their scalars.\n\n\n\n\n\n","category":"type"},{"location":"#Main.AlGeo.Algeo","page":"AlGeo.jl","title":"Main.AlGeo.Algeo","text":"Algeo(p, q, VectorBasis, Basis)::Algebra\n\nMain function for creating your Algebra and adding its basis blades to REPL. Constructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CanonBasis-Tuple{Array{String}}","page":"AlGeo.jl","title":"Main.AlGeo.CanonBasis","text":"CanonBasis(VectorBasis)::Array{Tuple{String, Int}}\n\nFunction that lists all the combinations of canonical vectors in a given Algebra.\n\nArguments\n\nVectorBasis::Array{String} : An array of strings to be combined.\n\nReturn\n\nReturns a list of tuples with all combinations of the elements and its index, forming the basis of the multivector space.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.CanonVectorBasis","page":"AlGeo.jl","title":"Main.AlGeo.CanonVectorBasis","text":"CanonVectorBasis(p, q)::Array{String}\n\nFunction that writes the canonical vector space, given the parameters p and q for definition\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\n\nReturn\n\nReturn an array of strings with all the necessary elements for this space.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CombinationsArray-Tuple{Array, Int64}","page":"AlGeo.jl","title":"Main.AlGeo.CombinationsArray","text":"CombinationsArray(lst, k)::Array{Array{Any}}\n\nFunction that calculates all combinations in an array of Integers.\n\nArguments\n\nlst::Array : A list of Integers.\nk::Int : The order of the combinations.\n\nReturn\n\nReturns an array with all combinations of elements taken k at a time.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.CombinationsTuple-Tuple{Array, Int64, Int64}","page":"AlGeo.jl","title":"Main.AlGeo.CombinationsTuple","text":"CombinationsTuple(lst, k, count)::Array{Tuple{Any,Int}}\n\nFunction that calculates all combinations in an array of strings.\n\nArguments\n\nlst::Array : A list of Strings.\nk::Int : The order of the combinations.\ncount::Int : The index of each element\n\nReturn\n\nReturns an array with all combinations of elements taken k at a time.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.CreateAlgebra","page":"AlGeo.jl","title":"Main.AlGeo.CreateAlgebra","text":"CreateAlgebra(p, q, VectorBasis, Basis)\n\nConstructor Function of an algebraic object with parameters p, q, R^{p, q}, and its multivector space. If not defined, the last two parameters are automatically calculated as canonical.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\nVectorBasis::Array{String} : An Array with vectors to work with\nBasis::Array{Tuple{String,Int}} : An Array with the multivector base and it's indexes\n\nReturn\n\nReturns the created Algebra object.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CreateGPTable","page":"AlGeo.jl","title":"Main.AlGeo.CreateGPTable","text":"CreateGPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Geometric Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CreateIPTable","page":"AlGeo.jl","title":"Main.AlGeo.CreateIPTable","text":"CreateIPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Inner Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CreateOPTable","page":"AlGeo.jl","title":"Main.AlGeo.CreateOPTable","text":"CreateOPTable(Al::Algebra)\n\nFunction that creates the Operation Table for the Outer Product.\n\nArguments\n\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.CreateSymbols-Tuple{Array}","page":"AlGeo.jl","title":"Main.AlGeo.CreateSymbols","text":"CreateSymbols(stringSymbols)\n\nCreate and add to REPL all the (custom or basis) symbols for this Algebra.\n\nArguments\n\nstringSymbols::Array : An array with all the custom or basis symbols.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.CreateTables-Tuple{}","page":"AlGeo.jl","title":"Main.AlGeo.CreateTables","text":"CreateTables()\n\nCreate and add to REPL all the custom operation tables for this Algebra.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.IndexesBasis","page":"AlGeo.jl","title":"Main.AlGeo.IndexesBasis","text":"IndexesBasis(p, q)::Array\n\nA function to return all the indexes of every canon multivector. It is used for internal calculations.\n\nArguments\n\np::Int : The first parameter of the definition\nq::Int : The second parameter of the definition\n\nReturn\n\nReturns an Array of Arrays of integers, with all indexes in order.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.Multivectors","page":"AlGeo.jl","title":"Main.AlGeo.Multivectors","text":"Multivectors(baseVectors, scalars, Al)::AbstractGeometricAlgebraType\n\nConstructor function for creating either blades or multivectors, done automatically.\n\nArguments\n\nbaseVectors::Array : An array of integers, representing the actual basis blade that exists in this object in order.\nscalars::Array : An array of integers, representing the scalars of each basis blade in order.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nReturns an AbstractGeometricAlgebraType.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.basisScalarProduct","page":"AlGeo.jl","title":"Main.AlGeo.basisScalarProduct","text":"basisScalarProduct(ei, ej, Al)::Int\n\nFunction that returns the Scalar Product between two basis blades.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Integer.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.bladeGeometricProduct","page":"AlGeo.jl","title":"Main.AlGeo.bladeGeometricProduct","text":"bladeGeometricProduct(ei, ej, Al)::Blade\n\nFunction that returns the Geometric Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.bladeIndex","page":"AlGeo.jl","title":"Main.AlGeo.bladeIndex","text":"bladeIndex(vec, Al)::Array\n\nFunction that returns the indexes of a blade.\n\nArguments\n\nvec::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nReturns an array with all indexes of that blade.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.bladeInnerProduct-Tuple{Blade, Blade}","page":"AlGeo.jl","title":"Main.AlGeo.bladeInnerProduct","text":"bladeInnerProduct(ei, ej)::Blade\n\nFunction that returns the Inner Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.bladeOuterProduct-Tuple{Blade, Blade}","page":"AlGeo.jl","title":"Main.AlGeo.bladeOuterProduct","text":"bladeOuterProduct(ei, ej)::Blade\n\nFunction that returns the Outer Product between two blades with the Operation Table.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.bladeScalar-Tuple{Blade}","page":"AlGeo.jl","title":"Main.AlGeo.bladeScalar","text":"bladeScalar(vec)::Any\n\nFunction that returns scalar of a Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nA real number, the scalar.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.bladeScalarProduct-Tuple{Blade, Number}","page":"AlGeo.jl","title":"Main.AlGeo.bladeScalarProduct","text":"bladeScalarProduct(ei, k)::Blade\n\nFunction that returns the Scalar Product between a blades and a 1D Number.\n\nArguments\n\nei::Blade : A Blade.\nk::Number : A scalar.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.grade-Tuple{Blade}","page":"AlGeo.jl","title":"Main.AlGeo.grade","text":"grade(vec)::Int\n\nFunction that returns the grade of the Blade.\n\nArguments\n\nvec::Blade : A Blade.\n\nReturn\n\nAn integer, the grade of the blade.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.gradeProjection-Tuple{Blade, Int64}","page":"AlGeo.jl","title":"Main.AlGeo.gradeProjection","text":"gradeProjection(vec, k)::Blade\n\nFunction that returns the grade Projection between a Blade and an Integer.\n\nArguments\n\nvec::Blade : A Blade.\nk::Int : An integer to the Grade Projection\n\nReturn\n\nThe result Blade. It might be the 1D blade \"1\"\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.lenElements-Tuple{Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.lenElements","text":"lenElements(vec)::Int\n\nFunction that returns the length of elements in an Abstract Geometric Algebra Type.\n\nArguments\n\nvec::AbstractGeometricAlgebraType : A multivector or a Blade.\n\nReturn\n\nAn integer, the ammount of elements.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.multivectorGP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.multivectorGP","text":"multivectorGP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the geometric product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.multivectorIP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.multivectorIP","text":"multivectorIP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the inner product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.multivectorOP-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.multivectorOP","text":"multivectorOP(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that computes the outer product of two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.multivectorSub-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.multivectorSub","text":"multivectorSub(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that subtracts two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.multivectorSum-Tuple{Main.AlGeo.AbstractGeometricAlgebraType, Main.AlGeo.AbstractGeometricAlgebraType}","page":"AlGeo.jl","title":"Main.AlGeo.multivectorSum","text":"multivectorSum(ei::AbstractGeometricAlgebraType, ej::AbstractGeometricAlgebraType)::AbstractGeometricAlgebraType\n\nFunction that sums two multivectors and return its result.\n\nArguments\n\nei::AbstractGeometricAlgebraType : A multivector.\nej::AbstractGeometricAlgebraType : A multivector.\n\nReturn\n\nThe result Multivector.\n\n\n\n\n\n","category":"method"},{"location":"#Main.AlGeo.rawBladeGeometricProduct","page":"AlGeo.jl","title":"Main.AlGeo.rawBladeGeometricProduct","text":"rawBladeGeometricProduct(ei, ej, Al)::Blade\n\nFunction that returns the Geometric Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\nAl::Algebra : The Algebra, it is setted as CurrentAlgebra.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.rawBladeInnerProduct","page":"AlGeo.jl","title":"Main.AlGeo.rawBladeInnerProduct","text":"rawBladeInnerProduct(ei, ej)::Blade\n\nFunction that returns the Inner Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"},{"location":"#Main.AlGeo.rawBladeOuterProduct","page":"AlGeo.jl","title":"Main.AlGeo.rawBladeOuterProduct","text":"rawBladeOuterProduct(ei, ej)::Blade\n\nFunction that returns the Outer Product between two blades. It is used for the Operation Table, it is high cost for single operations over time.\n\nArguments\n\nei::Blade : A Blade.\nej::Blade : A Blade.\n\nReturn\n\nThe result Blade.\n\n\n\n\n\n","category":"function"}]
}
